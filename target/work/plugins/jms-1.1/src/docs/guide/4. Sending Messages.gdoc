This plugin adds a service called @ jmsService @ to your application that can be used to send JMS messages.

h4. The send(destination, message, jmsTemplateName, postProcessor) method.

*destination*

An instance of @ javax.jms.Destination @ , @ javax.jms.Topic @ , a @ String @ or a @ Map @ .

A @ String @ destination argument will be interpreted as the name of a destination _queue_ .

A @ Map @ destination argument can be used in the following ways:

{code}
jmsService.send(queue: "aQueue", msg, "standard", null) // send to a literal queue

jmsService.send(topic: "aTopic", msg, "standard", null) // send to a literal topic

jmsService.send(service: "person", msg, "standard", null) // send to the queue '«appname».person'

jmsService.send(service: "person", method: "doIt", msg, "standard", null) // send to the queue '«appname».person.doIt'

jmsService.send(app: "remote", service: "person", method: "doIt", msg, "standard", null) // send to the queue 'remote.person.doIt'
{code}

The app/service/method convention makes a lot more sense if you read the section below on service method listener queue subscribers.

*message*

This is the message payload. By default this can be any Java/Groovy object or a javax.jms.Message. How it gets converted into a message is handled by the underlying jms template's message converter.

*jmsTemplateName*

The name of the template that should be used to send the message. If this value is @ null @ , the standard template will be used (called "standard").

*postProcessor*

An optional closure that can be used to "post process" the message after it has been converted into a message but before it has been sent. This closure acts as the implementation of the [postProcessMessage()|http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/jms/core/MessagePostProcessor.html#postProcessMessage(javax.jms.Message)] method of the [MessagePostProcessor|http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/jms/core/MessagePostProcessor.html] class.

h4. send() method variants

There are variations of the send() method for convenience...

{code:java}
jmsService.send(destination, message) // use the standard template and no post processor
jmsService.send(destination, message, postProcessor) // use the standard template
{code}